// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`e2e should pass basic: basic.diagnostics 1`] = `
[
  {
    "diagnostics": [],
    "filePath": "<e2eDir>/basic/ignored.py",
    "version": undefined,
  },
  {
    "diagnostics": [
      Diagnostic {
        "_relatedInfo": [],
        "_rule": "reportGeneralTypeIssues",
        "category": 0,
        "message": "Expression of type "Literal[2]" cannot be assigned to declared type "str"
  "Literal[2]" is incompatible with "str"",
        "range": {
          "end": {
            "character": 10,
            "line": 2,
          },
          "start": {
            "character": 9,
            "line": 2,
          },
        },
      },
    ],
    "filePath": "<e2eDir>/basic/main.py",
    "version": undefined,
  },
]
`;

exports[`e2e should pass basic: basic.errors 1`] = `
[
  {
    "fileContent": "from typing import Any
x: Any = 1
y: str = 2

z: Any = 1 # pyright-lint: ignore [noExplicitAny]
z1: Any = 1 # type: ignore [noExplicitAny]
z2: Any = 1 # pyright: ignore [noExplicitAny]
z3: Any = 1 # pyright: ignore

class Foo:
    pass
f"{Foo()}"
",
    "filename": "<e2eDir>/basic/main.py",
    "message": "Unexpected any. Specify a different type.",
    "range": {
      "end": {
        "character": 6,
        "line": 1,
      },
      "start": {
        "character": 3,
        "line": 1,
      },
    },
    "textRange": TextRange(26, 3),
  },
  {
    "fileContent": "from typing import Any
x: Any = 1
y: str = 2

z: Any = 1 # pyright-lint: ignore [noExplicitAny]
z1: Any = 1 # type: ignore [noExplicitAny]
z2: Any = 1 # pyright: ignore [noExplicitAny]
z3: Any = 1 # pyright: ignore

class Foo:
    pass
f"{Foo()}"
",
    "filename": "<e2eDir>/basic/main.py",
    "message": "Invalid type "Foo" of template literal expression.",
    "range": {
      "end": {
        "character": 8,
        "line": 11,
      },
      "start": {
        "character": 3,
        "line": 11,
      },
    },
    "textRange": TextRange(239, 5),
  },
]
`;
